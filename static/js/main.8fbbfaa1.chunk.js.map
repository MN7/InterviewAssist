{"version":3,"sources":["Questions/components/TestCases.js","Questions/components/Question.js","Questions/questionData.js","Questions/SnipQ0.js","Questions/CodeQ0.js","MyClass.js","App.js","index.js"],"names":["TestCases","props","handleClick","inpParamsArr","idx","handleCalculate","state","cAnswers","uAnswers","length","toString","setState","btnText","false","true","this","testCasesArr","forEach","el","push","map","tc","cAnswer","uAnswer","className","reduce","fin","itm","pName","JSON","stringify","pValue","slice","value","onChange","e","target","disabled","onClick","testCaseElt","Component","Question","qNum","qTitle","qSourceCode","questFunc","split","ln","i","snipQarray","title","sourceCode","arr","Math","round","pType","max","w","filter","x","pop","codeQarray","text","urls","href","rel","testCases","caseNum","inpEltName","inpEltValue","outEltValue","solution","totalSnipQuestions","totalCodeQuestions","SnipQ0","chosenQ","q","CodeQ0","cq","j","v","k","MyClass","codeQBgn","totalQuestions","clearQbtn","Array","keys","App","d","Date","dt","toISOString","substring","toLocaleTimeString","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8fbbfaa1.chunk.js","sourcesContent":["import { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../../styles.css\";\n\nclass TestCases extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cAnswers: [],\n      uAnswers: [],\n      btnText: { false: \"Clear\", true: \"Calculate\" },\n    };\n  }\n\n  handleClick = (inpParamsArr, idx, handleCalculate) => {\n    const { cAnswers, uAnswers } = this.state;\n    cAnswers[idx] =\n      cAnswers[idx].length === 0\n        ? handleCalculate(inpParamsArr).toString()\n        : \"\";\n    if (cAnswers[idx].length === 0) uAnswers[idx] = \"\";\n    this.setState({ cAnswers, uAnswers });\n  };\n\n  render() {\n    const { cAnswers, uAnswers, btnText } = this.state;\n    const { testCasesArr, handleCalculate } = this.props;\n    testCasesArr.forEach((el) => {\n      cAnswers.push(\"\");\n      uAnswers.push(\"\");\n    });\n    const testCaseElt = (\n      idx,\n      inpParamsArr,\n      handleCalculate,\n      cAnswer,\n      uAnswer // {pName} = {pValue.toString()}\n    ) => (\n      <Fragment key={idx}>\n        <div key={idx} className=\"sameLine\">\n          Case {idx + 1}:{\" \"}\n          {inpParamsArr\n            .reduce(\n              (fin, itm) =>\n                (fin += itm.pName + \" = \" + JSON.stringify(itm.pValue) + \", \"),\n              \"\"\n            )\n            .slice(0, -2)}{\" \"}\n          &emsp; Your answer:\n          <input\n            value={uAnswer}\n            onChange={(e) => {\n              uAnswers[idx] = e.target.value;\n              this.setState({ uAnswers });\n            }}\n          />\n          <button\n            className=\"tcButton\"\n            disabled={uAnswers[idx].length === 0}\n            onClick={() => {\n              this.handleClick(inpParamsArr, idx, handleCalculate);\n            }}\n          >\n            {btnText[cAnswer.length === 0]}\n          </button>\n          &emsp;\n          {!!cAnswer && (\n            <label className={cAnswer === uAnswer ? \"goodjob\" : \"\"}>\n              Computed answer:&emsp;{cAnswer}{\" \"}\n              {cAnswer === uAnswer && \"-- Correct answer!\"}\n            </label>\n          )}\n        </div>\n        <hr />\n      </Fragment>\n    );\n    const resultElt = (\n      <>\n        {testCasesArr.map((tc) =>\n          testCaseElt(\n            tc.idx,\n            tc.inpParamsArr,\n            handleCalculate,\n            cAnswers[tc.idx],\n            uAnswers[tc.idx]\n          )\n        )}\n      </>\n    );\n    return resultElt;\n  }\n}\n\nTestCases.propTypes = {\n  testCasesArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      idx: PropTypes.number,\n      inpParamsArr: PropTypes.arrayOf(\n        PropTypes.shape({\n          pName: PropTypes.string,\n          pValue: PropTypes.any,\n          pType: PropTypes.oneOf([\"number\", \"string\", \"array\", undefined]),\n        })\n      ).isRequired,\n    })\n  ),\n  handleCalculate: PropTypes.func.isRequired,\n};\n\nexport default TestCases;\n","import PropTypes from \"prop-types\";\nimport TestCases from \"./TestCases\";\nimport \"../../styles.css\";\n\nconst Question = ({ qNum, qTitle, qSourceCode, testCasesArr, questFunc }) => {\n  const resultElt = (\n    <div key={qNum} className=\"sameCol\">\n      <h4>\n        Question {qNum} - {qTitle}\n      </h4>\n      <div>\n        <pre>\n          {qSourceCode.split(\"\\n\").map((ln, i) => (\n            <code key={i}>\n              {(i === 0\n                ? `// Consider ${testCasesArr[0].inpParamsArr[0].pName}: ${testCasesArr[0].inpParamsArr[0].pValue}`\n                : ln) + \"\\n\"}\n            </code>\n          ))}\n        </pre>\n      </div>\n      <hr />\n      <TestCases testCasesArr={testCasesArr} handleCalculate={questFunc} />\n      <hr />\n    </div>\n  );\n  return resultElt;\n};\n\nQuestion.propTypes = {\n  qNum: PropTypes.string.isRequired,\n  qTitle: PropTypes.string.isRequired,\n  qSourceCode: PropTypes.string.isRequired,\n  testCasesArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      idx: PropTypes.number,\n      inpParamsArr: PropTypes.arrayOf(\n        PropTypes.shape({\n          pName: PropTypes.string,\n          pValue: PropTypes.any,\n          pType: PropTypes.oneOf([\"number\", \"string\", \"array\", undefined]),\n        })\n      ).isRequired,\n    })\n  ),\n  questFunc: PropTypes.func.isRequired,\n};\n\nexport default Question;\n","export const snipQarray = [\n  {\n    idx: 0,\n    title: \"Rounding\",\n    sourceCode: `// Consider\n      function f1(v) {\n        return Math.round( v * 100 ) / 100;\n      };`,\n    questFunc: (arr) => {\n      return Math.round(arr[0].pValue * 100) / 100;\n    },\n    testCasesArr: [\n      {\n        idx: 0,\n        inpParamsArr: [{ pName: \"v\", pValue: 1.2345, pType: \"number\" }],\n      },\n      {\n        idx: 1,\n        inpParamsArr: [{ pName: \"v\", pValue: 9.8765, pType: \"number\" }],\n      },\n    ],\n  },\n  {\n    idx: 1,\n    title: \"Paragraph-split\",\n    sourceCode: `// Consider\n      const f2 = (paragraph) => {\n        return Math.max(\n          ...paragraph.split(' ').map(w => w.length)\n          );\n      };`,\n    questFunc: (arr) => {\n      return Math.max(...arr[0].pValue.split(\" \").map((w) => w.length));\n    },\n    testCasesArr: [\n      {\n        idx: 0,\n        inpParamsArr: [\n          {\n            pName: \"paragraph\",\n            pValue: \"Two plus two equals four\",\n            pType: \"string\",\n          },\n        ],\n      },\n      {\n        idx: 1,\n        inpParamsArr: [\n          {\n            pName: \"paragraph\",\n            pValue:\n              \"This paragraph is not very long as it comprises only of one sentence\",\n            pType: \"string\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    idx: 2,\n    title: \"Key Value pairs\",\n    sourceCode: `// Consider\n      function f3 (arr) => {\n        const res = {}\n        for (let i = 0; i < arr.length; i++) {\n          const val = res[arr[i]] || 0;\n          res[arr[i]] = val + 1;\n        }\n        return res;\n      };`,\n    questFunc: (arr) => {\n      return JSON.stringify(\n        arr[0].pValue.reduce(\n          (fin, itm) => ({ ...fin, [itm]: (fin[itm] || 0) + 1 }),\n          {}\n        )\n      );\n    },\n    testCasesArr: [\n      {\n        idx: 0,\n        inpParamsArr: [\n          {\n            pName: \"arr\",\n            pValue: [\"a\", \"a\", \"c\", \"b\", \"a\", \"b\"],\n            pType: \"array\",\n          },\n        ],\n      },\n      {\n        idx: 1,\n        inpParamsArr: [\n          {\n            pName: \"arr\",\n            pValue: [\"abc\", \"abc\", \"ca\", \"ac\", \"ca\", \"xyb\"],\n            pType: \"array\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    idx: 3,\n    title: \"Array manipulation\",\n    sourceCode: `// Consider\n      function f4(inpArr, inpIdx = 0, outArr = []) {\n        if (inpIdx === inpArr.length) return outArr.pop();\n        for (let outIdx = 0; outIdx < outArr.length; outIdx++) {\n          if (inpArr[inpIdx] < outArr[outIdx]) {\n            return f4(inpArr, inpIdx + 1, [\n              ...outArr.slice(0, outIdx),\n              inpArr[inpIdx],\n              ...outArr.slice(outIdx)\n            ]);\n          }\n        }\n        return f4(inpArr, inpIdx + 1, outArr.concat(inpArr[inpIdx]));\n      };`,\n    questFunc: (arr) => {\n      return arr[0].pValue\n        .reduce(\n          (fin, itm) => [\n            ...fin.filter((x) => x <= itm),\n            itm,\n            ...fin.filter((x) => x > itm),\n          ],\n          []\n        )\n        .pop();\n    },\n    testCasesArr: [\n      {\n        idx: 0,\n        inpParamsArr: [\n          {\n            pName: \"inpArr\",\n            pValue: [\"a\", \"m\", \"d\", \"k\", \"g\"],\n            pType: \"array\",\n          },\n        ],\n      },\n      {\n        idx: 1,\n        inpParamsArr: [\n          {\n            pName: \"inpArr\",\n            pValue: [1, 3, 7, 2, 4, 5, 0, 6],\n            pType: \"array\",\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport const codeQarray = [\n  {\n    idx: 0,\n    title: \"Fizz Buzz - the most basic\",\n    text: \"Given a number less than 100, return an array as described\",\n    urls: [\n      <a\n        key=\"0\"\n        href=\"https://en.wikipedia.org/wiki/Fizz_buzz\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        here\n      </a>,\n      \": \",\n      <a\n        key=\"1\"\n        href=\"https://en.wikipedia.org/wiki/Fizz_buzz\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        https://en.wikipedia.org/wiki/Fizz_buzz\n      </a>,\n    ],\n    testCases: [\n      {\n        caseNum: 0,\n        inpEltName: \"InputNumber\",\n        inpEltValue: \"10\",\n        outEltValue: \"[ 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz ]\",\n      },\n      {\n        caseNum: 1,\n        inpEltName: \"InputNumber\",\n        inpEltValue: \"15\",\n        outEltValue:\n          \"[ 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, Fizz Buzz ]\",\n      },\n    ],\n    solution: `[...Array(inpNum).keys()].map(i => i + 1).map(i => \n      i % 3 === 0 && i % 5 === 0\n      ? 'Fizz Buzz'\n      : i % 5 === 0\n        ? 'Buzz'\n        : i % 3 === 0\n        ? 'Fizz'\n        : i\n      );`,\n  },\n  {\n    idx: 1,\n    title: \"Find the most-frequent element in an array\",\n    text: \"Given an array, return the most repeated element/s\",\n    testCases: [\n      {\n        caseNum: 0,\n        inpEltName: \"InputArray\",\n        inpEltValue: \"[ 'a', 'a', 'd', 'b', 'd', 'c', 'a', 'b']\",\n        outEltValue: \"['a']\",\n      },\n      {\n        caseNum: 1,\n        inpEltName: \"InputArray\",\n        inpEltValue: \"[ 'a', 'a', 'b', 'b', 'd', 'c', 'a', 'b']\",\n        outEltValue: \"['a', 'b']\",\n      },\n      {\n        caseNum: 1,\n        inpEltName: \"InputArray\",\n        inpEltValue: \"[ 0, 7, 1, 2, 0, 4 ]\",\n        outEltValue: \"[0]\",\n      },\n      {\n        caseNum: 1,\n        inpEltName: \"InputArray\",\n        inpEltValue: \"[ 1, 7, 0, 7, 4, 0 ]\",\n        outEltValue: \"[0, 7]\",\n      },\n    ],\n  },\n  {\n    idx: 2,\n    title: \"Generate a dictionary of words based on length\",\n    text: \"Given a paragraph (ie, string), generate a map (ie, key-value pair) where key is length (integer) and value is an array of words (in paragraph) where length = key.\",\n    testCases: [\n      {\n        caseNum: 0,\n        inpEltName: \"InputString\",\n        inpEltValue: \"'Two plus two equals four'\",\n        outEltValue: `{ $\n              3: ['Two', 'two'], $\n              4: ['plus', 'four'], $\n              6: ['equals'] $\n        }`,\n      },\n      {\n        caseNum: 1,\n        inpEltName: \"InputString\",\n        inpEltValue:\n          \"'This paragraph is not very long as it comprises only of one sentence'\",\n        outEltValue: `{ $\n          2 : ['is', 'as', 'it', 'of'], $\n          3 : ['not', 'one'], $\n          4 : ['This', 'very', 'long', 'only'], $\n          8 : ['sentence'], $\n          9 : ['paragraph', 'comprises'] $\n         }`,\n      },\n    ],\n  },\n];\n\nexport const totalSnipQuestions = snipQarray.length;\nexport const totalCodeQuestions = codeQarray.length;\n","import \"../styles.css\";\nimport PropTypes from \"prop-types\";\nimport Question from \"./components/Question\";\nimport { snipQarray } from \"./questionData\";\n\nconst SnipQ0 = ({ chosenQ }) => {\n  const retVal = snipQarray\n    .filter((q, i) => i === chosenQ)\n    .map((q) => (\n      <Question\n        key={q.idx}\n        qNum={(q.idx + 1).toString()}\n        qTitle={q.title}\n        qSourceCode={q.sourceCode}\n        testCasesArr={q.testCasesArr}\n        questFunc={q.questFunc}\n      />\n    ));\n\n  return retVal;\n};\n\nSnipQ0.propTypes = {\n  chosenQ: PropTypes.number.isRequired,\n};\n\nexport default SnipQ0;\n","import PropTypes from \"prop-types\";\nimport \"../styles.css\";\nimport { codeQarray } from \"./questionData\";\n\nconst CodeQ0 = ({ chosenQ }) => {\n  const retVal = (\n    <div className=\"sameCol\">\n      {codeQarray\n        .filter((cq) => cq.idx === chosenQ)\n        .map((cq, i) => {\n          return (\n            <div key={i}>\n              <h4>{cq.title}</h4>\n              <p>\n                {cq.text} {cq.urls && cq.urls.map((x) => x)}\n              </p>\n              {cq.testCases.map((tc, j) => {\n                return (\n                  <div key={i * 100 + j}>\n                    <p>Test Case {tc.caseNum + 1}</p>\n                    <p>{tc.inpEltName}: </p>\n                    <code>{tc.inpEltValue}</code>\n                    <p>Expected output:</p>\n                    <code>\n                      {tc.outEltValue.split(\"$\").map((v, k) => (\n                        <span key={k}>{v}</span>\n                      ))}\n                    </code>\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n    </div>\n  );\n  return retVal;\n};\n\nCodeQ0.propTypes = {\n  chosenQ: PropTypes.number.isRequired,\n};\n\nexport default CodeQ0;\n","import { Component, Fragment } from \"react\";\nimport \"./styles.css\";\nimport { CodeQ0, SnipQ0 } from \"./Questions\";\nimport {\n  totalSnipQuestions,\n  totalCodeQuestions,\n} from \"./Questions/questionData\";\n\nexport default class MyClass extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chosenQ: -1,\n    };\n  }\n\n  render() {\n    const { chosenQ } = this.state;\n    const codeQBgn = totalSnipQuestions;\n    const totalQuestions = totalSnipQuestions + totalCodeQuestions;\n    const clearQbtn = (\n      <button\n        className=\"qColBtns\"\n        onClick={() => {\n          this.setState({ chosenQ: -1 });\n        }}\n      >\n        Clear Question\n      </button>\n    );\n\n    const retval = (\n      <>\n        <div className=\"sameLine\">\n          <div className=\"sameCol widthQBox\">\n            <h4>Understanding Code Snippets</h4>\n            {[...Array(totalQuestions).keys()].map((i) => (\n              <Fragment key={i}>\n                {i === codeQBgn && (\n                  <>\n                    {chosenQ !== -1 && chosenQ < codeQBgn && clearQbtn}\n                    <h6 className=\"widthTipLine\">\n                      Please use pen/pencil, paper as needed for code-snippet\n                      questions\n                    </h6>\n                    <h4>Developing Code</h4>\n                  </>\n                )}\n                <button\n                  className=\"qColBtns\"\n                  key={i}\n                  onClick={() => {\n                    this.setState({ chosenQ: i });\n                  }}\n                >\n                  {\"Question \" + ((i >= codeQBgn ? i - codeQBgn : i) + 1)}\n                </button>\n              </Fragment>\n            ))}\n            {chosenQ !== -1 && chosenQ >= codeQBgn && clearQbtn}\n          </div>\n          {chosenQ !== -1 &&\n            (chosenQ < codeQBgn ? (\n              <SnipQ0 chosenQ={chosenQ} />\n            ) : (\n              <CodeQ0 chosenQ={chosenQ - codeQBgn} />\n            ))}\n        </div>\n      </>\n    );\n    return retval;\n  }\n}\n","import MyClass from \"./MyClass\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const d = new Date();\n  const dt =\n    d.toISOString().substring(0, 10) +\n    \" \" +\n    d.toLocaleTimeString().substring(0, 5);\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Technical Discussion - {dt}</h1>\n      <h2>JavaScript Knowledge & Experience preferred</h2>\n      <MyClass />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}